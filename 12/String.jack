// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	
	field Array obj;
	field int curr_length, max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(~(maxLength>0)) {
			let obj = Array.new(1);
		}
		else {
			let obj = Array.new(maxLength);
		}
		
		let curr_length = 0;
		let max_length = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do obj.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return curr_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {	
		return obj[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let obj[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let obj[curr_length] = c;
		let curr_length = curr_length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let curr_length = curr_length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int val, i;
		var boolean is_neg;
		let val = 0;
		let i = 0;
		let is_neg = false;
 
		if((curr_length > 0) & (obj[0] = 45)) {
			let is_neg = true;
			let i = i + 1;
		}
	
		while(true) {
			if(i = curr_length) {
				if(is_neg) {
					let val = -val;
				}	
				return val;
			}
			if((obj[i] > 47) & (obj[i] < 58)) {
				let val = (10 * val) + (obj[i] - 48);
			}
			else {
				return val;
			}
			let i = i + 1;
		}
		return val; 
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int digit, exp;
		let curr_length = 0;
		
		if (val < 0) {
			let val = -val;
			do appendChar(45);
		}
		
		while (val > 0) {
			let digit = val;
			let exp = 1;
			while (digit > 9) {
				let digit = digit / 10;
				let exp = exp * 10;
			}
			let val = val - (exp * digit);
			do appendChar(digit + 48);
		}
		return;
	}


    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
